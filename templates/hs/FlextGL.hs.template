@require(passthru, functions, enums, options, version, extensions, types, raw_enums)
{-# LANGUAGE CPP, ForeignFunctionInterface, EmptyDataDecls #-}
#ifdef __GLASGOW_HASKELL__
{-# LANGUAGE DeriveDataTypeable, StandaloneDeriving #-}
#endif
-- WARNING: This file was automatically generated
-- Do not edit.

@(
   def haskellize(typ):
    out = typ.replace("const ", "").replace("const", "")
    ptr_depth = typ.count("*")
    out = out.replace("*", "").strip()
    if out == "void":
        if ptr_depth == 0:
            out = "()"
        else:
            out = ""
    return "Ptr ("*ptr_depth + out + ")"*ptr_depth
)

@(
    sorted_raw_enums = sorted(raw_enums)
)

@(
   def processenum(enum):
    if enum.endswith("ull"): return enum[:-3]
    if enum.endswith("u"): return enum[:-1]
    return enum
 )

@(
   def lowercasifygl(name):
    if name.startswith("GL"):
        return "gl" + name[2:]
    else:
        return name
 )

module FlextGL
    ( flextInit
    , getGLVersion
    , FlextInitResult(..)
@for extension,required in extensions:
    , has_GL_@extension
@end
@for cats,funcs in functions:
@for f in funcs:
    , gl@f.name
@end
@end
@for e in sorted_raw_enums:
    , @lowercasifygl(e)
@end
    , GLsync
    , GLsyncob()
    , GLhalf
    , GLhalfARB
    , GLintptrARB
    , GLsizeiptrARB
    , GLDEBUGPROC
    , GLDEBUGPROCARB
    , GLDEBUGPROCKHR
    , GLDEBUGPROCAMD
    , GLbyte
    , GLubyte
    , GLfloat
    , GLclampf
    , GLfixed
    , GLint64
    , GLuint64
    , GLint64EXT
    , GLuint64EXT
    , GLintptr
    , GLsizeiptr
    , GLhalfNV
    , GLvdpauSurfaceNV
    , GLenum
    , GLboolean
    , GLvoid
    , GLbitfield
    , GLshort
    , GLint
    , GLclampx
    , GLushort
    , GLuint
    , GLsizei
    , GLdouble
    , GLclampd
    , GLeglImageOESob()
    , GLeglImageOES
    , GLchar
    , GLcharARB
    , GLhandleARB
    )
    where

import Data.Typeable
import Data.IORef
import Data.Int
import Data.Word
import System.IO.Unsafe
import Control.Applicative
import Control.Exception
import Control.Monad
import Control.Monad.IO.Class
import Control.Monad.Trans.Except
import Foreign.C.Types
import Foreign.C.String
import Foreign.Ptr
import Foreign.Storable
import Foreign.Marshal.Alloc

#ifdef mingw32_HOST_OS
#define APIENTRY stdcall
#else
#define APIENTRY
import qualified System.Posix.DynamicLinker.ByteString as POSIX
#endif

data FlextInitResult = Failure { why :: String }
                     | Success
                     deriving ( Eq, Ord, Show, Read )

#ifdef __GLASGOW_HASKELL__
deriving instance Typeable FlextInitResult
instance Exception FlextInitResult
#endif

proc :: Either a a -> a
proc (Left x) = x
proc (Right x) = x

getGLVersion :: MonadIO m => m (Int, Int)
getGLVersion =
    liftIO $ alloca $ \major_ptr -> alloca $ \minor_ptr -> do
        -- in case glGetIntegerv is completely broken, set initial values for
        -- major and minor pointers
        poke major_ptr 0
        poke minor_ptr 0
        glGetIntegerv gl_MAJOR_VERSION major_ptr
        glGetIntegerv gl_MINOR_VERSION minor_ptr
        major <- fromIntegral <$> peek major_ptr
        minor <- fromIntegral <$> peek minor_ptr
        return (major, minor)

-- | Initializes OpenGL entry points in the current OpenGL context.
flextInit :: (String -> IO (Ptr ()))
          -> IO FlextInitResult
flextInit get_proc_address = fmap proc $ runExceptT $ do
    @for category,funcs in functions:
    -- GL_@category

    @for f in funcs:
    when True $ liftIO $ do
        addr' <- castPtrToFunPtr . castPtr <$> get_proc_address "gl@f.name"
#ifndef mingw32_HOST_OS
        addr <- if addr' == nullFunPtr
          then catch (POSIX.dlsym POSIX.Default "gl@f.name")
                     (\exc -> (exc :: SomeException) `seq` return nullFunPtr)
          else return addr'
#else
        let addr = addr'
#endif
        writeIORef glref@f.name $ gldyn@f.name addr
    @end

    @end

    @if version.int_value() >= 32 and not version.profile == 'core':
    profile <- liftIO $ gi gl_CONTEXT_PROFILE_MASK
    when (profile .&. gl_CONTEXT_COMPATIBILITY_PROFILE_BIT == 0) $
        throwE $ Failure "This application requires a compatibility profile."
    @end

    -- In OpenGL 3.3+, glGetString is deprecated and glGetStringi should be used
    -- for extensions.
    (major, minor) <- getGLVersion
    exts <- liftIO $ if major >= 4 || major >= 3 && minor >= 3
            then do
              exts_num <- alloca $ \num_ptr -> do
                glGetIntegerv gl_NUM_EXTENSIONS num_ptr
                fromIntegral <$> peek num_ptr
              forM [0..exts_num-1] $ \i -> do
                ext_raw <- castPtr `fmap` glGetStringi gl_EXTENSIONS i
                peekCString ext_raw
            else do
              exts_raw <- castPtr `fmap` glGetString gl_EXTENSIONS
              exts_cptr <- peekCString exts_raw
              return $ words exts_cptr

    @for extension,required in extensions:
    when True $ do
        let result = elem "GL_@extension" exts
    @if required:
        unless result $ do
            throwE $ Failure $ "Missing OpenGL extension: " ++ "GL_@extension"
    @else:
        liftIO $ writeIORef hasref_GL_@extension result
    @end
    @end

    return Success

@for extension,required in extensions:
has_GL_@extension :: MonadIO m => m Bool
has_GL_@extension = liftIO $ readIORef hasref_GL_@extension
{-# INLINE has_GL_@extension #-}
hasref_GL_@extension :: IORef Bool
@if required:
hasref_GL_@extension = unsafePerformIO $ newIORef True
@else:
hasref_GL_@extension = unsafePerformIO $ newIORef False
@end
{-# NOINLINE hasref_GL_@extension #-}
@end

@for cat,funcs in functions:

-- GL_@cat

@for f in funcs:
type Funtype@f.name =
@for t,p in f.params:
    @haskellize(p) ->
@end
    IO ( @haskellize(f.returntype) )
foreign import ccall APIENTRY unsafe "dynamic"
    gldyn@f.name :: FunPtr Funtype@f.name -> Funtype@f.name
glref@f.name :: IORef Funtype@f.name
glref@f.name = unsafePerformIO $ newIORef $ error "No function retrieved."
{-# NOINLINE glref@f.name #-}
gl@f.name :: MonadIO m =>
@for t,p in f.params:
    @haskellize(p) ->
@end
    m ( @haskellize(f.returntype) )
gl@f.name
@for i in range(len(f.params)):
    a@str(i)
@end
    = liftIO $ (unsafePerformIO $ readIORef glref@f.name)
@for i in range(len(f.params)):
      a@str(i)
@end
{-# INLINE gl@f.name #-}
@end
@end

@for e in sorted_raw_enums:
@lowercasifygl(e) :: GLenum
@lowercasifygl(e) = @processenum(raw_enums[e])
@end

data GLsyncob
type GLsync = Ptr GLsyncob

type GLhalf = Word16
type GLhalfARB = Word16
type GLintptrARB = CPtrdiff
type GLsizeiptrARB = CPtrdiff
type GLDEBUGPROC =
    FunPtr (GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ())
type GLDEBUGPROCARB = GLDEBUGPROC
type GLDEBUGPROCKHR = GLDEBUGPROC
type GLDEBUGPROCAMD =
    FunPtr (GLuint -> GLenum -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ())
type GLbyte = CChar
type GLubyte = CUChar
type GLfloat = CFloat
type GLclampf = CFloat
type GLfixed = Int32
type GLint64 = Int64
type GLuint64 = Word64
type GLint64EXT = Int64
type GLuint64EXT = Word64
type GLintptr = CIntPtr
type GLsizeiptr = CSize
type GLhalfNV = CUShort
type GLvdpauSurfaceNV = GLintptr
type GLenum = CUInt
type GLboolean = CUChar
type GLvoid = ()
type GLbitfield = CUInt
type GLshort = CShort
type GLint = CInt
type GLclampx = CInt
type GLushort = CUShort
type GLuint = CUInt
type GLsizei = CInt
type GLdouble = CDouble
type GLclampd = CDouble
data GLeglImageOESob
type GLeglImageOES = Ptr GLeglImageOESob
type GLchar = CChar
type GLcharARB = CChar
#ifdef __APPLE__
type GLhandleARB = Ptr ()
#else
type GLhandleARB = CUInt
#endif

