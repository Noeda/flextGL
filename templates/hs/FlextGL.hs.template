@require(passthru, functions, enums, options, version, extensions, types, raw_enums)
{-# LANGUAGE CPP, ForeignFunctionInterface, EmptyDataDecls #-}
#ifdef __GLASGOW_HASKELL__
{-# LANGUAGE DeriveDataTypeable, StandaloneDeriving #-}
#endif
-- WARNING: This file was automatically generated
-- Do not edit.

@(
   def haskellize(typ):
    out = typ.replace("const ", "").replace("const", "")
    ptr_depth = typ.count("*")
    out = out.replace("*", "").strip()
    if out == "void":
        if ptr_depth == 0:
            out = "()"
        else:
            out = ""
    return "Ptr ("*ptr_depth + out + ")"*ptr_depth
)

@(
   def processenum(enum):
    if enum.endswith("ull"): return enum[:-3]
    if enum.endswith("u"): return enum[:-1]
    return enum
 )

@(
   def lowercasifygl(name):
    if name.startswith("GL"):
        return "gl" + name[2:]
    else:
        return name
 )

module FlextGL
    ( flextInit
    , FlextInitResult(..)
@for extension,required in extensions:
    , has_GL_@extension
@end
@for cats,funcs in functions:
@for f in funcs:
    , gl@f.name
@end
@end
@for e in raw_enums:
    , @lowercasifygl(e)
@end
    , GLsync
    , GLsyncob()
    , GLhalf
    , GLhalfARB
    , GLintptrARB
    , GLsizeiptrARB
    , GLDEBUGPROC
    , GLDEBUGPROCARB
    , GLDEBUGPROCKHR
    , GLDEBUGPROCAMD
    , GLbyte
    , GLubyte
    , GLfloat
    , GLclampf
    , GLfixed
    , GLint64
    , GLuint64
    , GLint64EXT
    , GLuint64EXT
    , GLintptr
    , GLsizeiptr
    , GLhalfNV
    , GLvdpauSurfaceNV
    , GLenum
    , GLboolean
    , GLvoid
    , GLbitfield
    , GLshort
    , GLint
    , GLclampx
    , GLushort
    , GLuint
    , GLsizei
    , GLdouble
    , GLclampd
    , GLeglImageOESob()
    , GLeglImageOES
    , GLchar
    , GLcharARB
    , GLhandleARB
    )
    where

import Data.Typeable
import Data.IORef
import Data.Int
import Data.Word
import System.IO.Unsafe
import Control.Applicative
import Control.Exception
import Control.Monad
import Control.Monad.IO.Class
import Control.Monad.Trans.Except
import Foreign.C.Types
import Foreign.C.String
import Foreign.Ptr

#ifdef mingw32_HOST_OS
#define APIENTRY stdcall
#else
#define APIENTRY
import qualified System.Posix.DynamicLinker.ByteString as POSIX
#endif

data FlextInitResult = Failure { why :: String }
                     | Success
                     deriving ( Eq, Ord, Show, Read )

#ifdef __GLASGOW_HASKELL__
deriving instance Typeable FlextInitResult
instance Exception FlextInitResult
#endif

proc :: Either a a -> a
proc (Left x) = x
proc (Right x) = x

parseExtensionString :: String -> [String]
parseExtensionString [] = []
parseExtensionString str = rec str [] [] where
    rec [] ext exts =
        if null ext
          then exts
          else (reverse ext:exts)
    rec (' ':rest) ext exts =
        if null ext
          then rec rest [] exts
          else rec rest [] (reverse ext:exts)
    rec (x:rest) ext exts =
        rec rest (x:ext) exts

-- | Initializes OpenGL entry points in the current OpenGL context.
flextInit :: (String -> IO (Ptr ()))
          -> IO FlextInitResult
flextInit get_proc_address = fmap proc $ runExceptT $ do
    @for category,funcs in functions:
    -- GL_@category

    @for f in funcs:
    when True $ liftIO $ do
        addr' <- castPtrToFunPtr . castPtr <$> get_proc_address "gl@f.name"
#ifndef mingw32_HOST_OS
        addr <- if addr' == nullFunPtr
          then catch (POSIX.dlsym POSIX.Default "gl@f.name")
                     (\exc -> (exc :: SomeException) `seq` return nullFunPtr)
          else return addr'
#else
        let addr = addr'
#endif
        writeIORef glref@f.name $ gldyn@f.name addr
    @end

    @end

    @if version.int_value() >= 32 and not version.profile == 'core':
    profile <- liftIO $ gi gl_CONTEXT_PROFILE_MASK
    when (profile .&. gl_CONTEXT_COMPATIBILITY_PROFILE_BIT == 0) $
        throwE $ Failure "This application requires a compatibility profile."
    @end

    -- This function should exist in every OpenGL
    exts_raw <- liftIO $ castPtr `fmap` glGetString gl_EXTENSIONS
    exts_cptr <- liftIO $ peekCString exts_raw
    let exts = parseExtensionString exts_cptr

    @for extension,required in extensions:
    when True $ do
        let result = elem "GL_@extension" exts
    @if required:
        unless result $ do
            throwE $ Failure $ "Missing OpenGL extension: " ++ "GL_@extension"
    @else:
        liftIO $ writeIORef hasref_GL_@extension result
    @end
    @end

    return Success

@for extension,required in extensions:
has_GL_@extension :: IO Bool
has_GL_@extension = readIORef hasref_GL_@extension
{-# INLINE has_GL_@extension #-}
hasref_GL_@extension :: IORef Bool
@if required:
hasref_GL_@extension = unsafePerformIO $ newIORef True
@else:
hasref_GL_@extension = unsafePerformIO $ newIORef False
@end
{-# NOINLINE hasref_GL_@extension #-}
@end

@for cat,funcs in functions:

-- GL_@cat

@for f in funcs:
type Funtype@f.name =
@for t,p in f.params:
    @haskellize(p) ->
@end
    IO ( @haskellize(f.returntype) )
foreign import ccall APIENTRY unsafe "dynamic"
    gldyn@f.name :: FunPtr Funtype@f.name -> Funtype@f.name
glref@f.name :: IORef Funtype@f.name
glref@f.name = unsafePerformIO $ newIORef $ error "No function retrieved."
{-# NOINLINE glref@f.name #-}
gl@f.name :: Funtype@f.name
gl@f.name = unsafePerformIO $ readIORef glref@f.name
{-# INLINE gl@f.name #-}
@end
@end

@for e in raw_enums:
@lowercasifygl(e) :: GLenum
@lowercasifygl(e) = @processenum(raw_enums[e])
@end

data GLsyncob
type GLsync = Ptr GLsyncob

type GLhalf = Word16
type GLhalfARB = Word16
type GLintptrARB = CPtrdiff
type GLsizeiptrARB = CPtrdiff
type GLDEBUGPROC =
    FunPtr (GLenum -> GLenum -> GLuint -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ())
type GLDEBUGPROCARB = GLDEBUGPROC
type GLDEBUGPROCKHR = GLDEBUGPROC
type GLDEBUGPROCAMD =
    FunPtr (GLuint -> GLenum -> GLenum -> GLsizei -> Ptr GLchar -> Ptr () -> IO ())
type GLbyte = CChar
type GLubyte = CUChar
type GLfloat = CFloat
type GLclampf = CFloat
type GLfixed = Int32
type GLint64 = Int64
type GLuint64 = Word64
type GLint64EXT = Int64
type GLuint64EXT = Word64
type GLintptr = CIntPtr
type GLsizeiptr = CSize
type GLhalfNV = CUShort
type GLvdpauSurfaceNV = GLintptr
type GLenum = CUInt
type GLboolean = CUChar
type GLvoid = ()
type GLbitfield = CUInt
type GLshort = CShort
type GLint = CInt
type GLclampx = CInt
type GLushort = CUShort
type GLuint = CUInt
type GLsizei = CInt
type GLdouble = CDouble
type GLclampd = CDouble
data GLeglImageOESob
type GLeglImageOES = Ptr GLeglImageOESob
type GLchar = CChar
type GLcharARB = CChar
#ifdef __APPLE__
type GLhandleARB = Ptr ()
#else
type GLhandleARB = CUInt
#endif

